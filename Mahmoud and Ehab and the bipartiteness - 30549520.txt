#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <unordered_set>
#include <map>
#include <set>
#include <unordered_map>
#include <climits>
#include <cmath>
#include <stack>
#include <string>
using namespace std ;
#define ll long long int
#define IOS ios::sync_with_stdio(false)  ; cin.tie(0) ; cout.tie() ; 
int color[100001]  ; 
vector<int>vec[100001] ; 



void dobfs(int src)
{
  queue<int>q  ; 
  q.push(src) ; 
  color[src]  = 1 ; 

  while(!q.empty())
  {
   int y = q.front()  ; 
    q.pop()  ;  


    for(int i  = 0  ; i < vec[y].size() ; ++i)
    {
        if(color[ vec[y][i] ] == 0)
        {
            if(color[y] == 1)
            color[vec[y][i]] = 2 ; 
            else
            color[vec[y][i]] = 1; 

            q.push(vec[y][i])  ; 
        }
    }

  }
  

}
 
int main()
{ 
   int  n ; 
   cin>>n ;  
   for(int i  = 0 ; i < n -1 ;  ++i)
   {
   int u  , v ; 
   cin>>u>>v;  
   vec[u].push_back(v)  ; 
   vec[v].push_back(u) ;  
   }

   dobfs(1) ;  
    ll c1 =  0 ;
    ll c2 =  0 ;
   for(int i  = 1 ;  i<=  n ; ++i)
   {
            if(color[i] ==1)
             {
             //  cout<<"c1   "<<i<<"\n"   ; 
              c1++ ;} 
            else{
              //cout<<"c2"<<" "<<i<<"\n" ; 
              c2++ ; 
            }
   }

   //cout<<c1<< "  "<<c2   ;
   cout<<(c1 * c2)  -  (n-1)  ;  
 
return  0 ;  
}
  