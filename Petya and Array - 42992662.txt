#include <iostream>
#include <vector>
#include <cmath>
#include <set>
#include <map>
#include <queue>
#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <climits>
#include <iomanip>
#include <cstdio>
#define ll   long long int
#define MOD 1000000007
#define inf  20000000000000
#define eps  0.0000000000001
using namespace std ; 
ll arr[200003]  ;  
pair<ll,ll> prefix[200003] ;
ll n , t ; 
ll fenwick[200003] ;  

void build(ll index)
{
    for(ll  i   =  index   ;  i <= 200002;    i += (i & -i))
    {
        fenwick[i] += 1 ;   
    }
}


ll query(ll index)
{
   ll ans =  0;  
    for(ll i  = index ;  i  > 0   ;  i  -= (i & -i))
    {
       ans += fenwick[i] ;
    }
    return ans ; 
}


ll bin(ll ind)
{
 ll low = 0  , hi = n ;  

  while(low < hi)
  {
     ll mid  =  (hi + low + 1)/2 ;
     
     if( prefix[ind].first - prefix[mid].first >= t )
         low  = mid ;  
       else
        hi = mid - 1 ;  

  }
  return low ; 
}


 
int main()
{
   ios::sync_with_stdio(false);cin.tie(0) ;cout.tie(0) ;
  cin>>n>>t ;  

   for(ll i =  1  ;  i <= n    ; ++i)
    cin>>arr[i] ;   
    prefix[0] =  {0 , 0}  ;  
    ll extra = 0  ;
    for(ll i  = 1 ;  i <= n   ; ++i)
     { 
      prefix[i].first   =  prefix[i-1].first + arr[i] ;
      if(prefix[i].first >= t)
        extra++ ;  
      prefix[i].second =  i ;  
     }  

  sort(prefix  +1 ,  prefix + n + 1 ,  [](auto a   ,auto b){
       if(a.first == b.first)
        return a.second < b.second ;  
      return a.first < b.first ;  
  }  ) ;



 
 ll ans = 0  ; 
 ll upto =  0 ; 
  for(ll  i  = 1 ;  i <=n  ; ++i)
  {
      ll q = bin(i) ;  
      if(q != 0)
      {
         for(ll  p   =  upto  + 1;  p  <= q  ; ++p)
         {

            build(prefix[p].second) ; 
         }
         upto =  q ;  
      } 
      ans += query(prefix[i].second-1) ; 

      //cout<<query(prefix[i].second)<<"\n" ;  
  }

  cout<< (n * (n+1))/2  - (ans  + extra ) ; 

 return  0  ;
  
} 